---

---

<!doctype html>
<html lang="zh-Hant">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>繁體拼音輸入練習</title>
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
  </head>
  <body>
    <div class="container">
      <h1>繁體拼音輸入練習</h1>
      <div id="article"></div>
      <div class="button-container">
        <button class="toggle-switch on" id="toggle-hint" aria-label="切換提示"
        ></button>
        <div id="input-wrapper">
          <input
            type="text"
            id="input"
            placeholder="請輸入拼音，按 Enter 確認"
          />
        </div>
        <div class="progress-container">
          <div id="progress"></div>
          <button id="next-article">下一篇文章</button>
        </div>
      </div>
      <p class="instruction">提示：輸入錯誤時會顯示正確答案</p>
    </div>
  </body>
</html>

<style is:global>
  :root {
    --primary-color: #3498db;
    --secondary-color: #2c3e50;
    --success-color: #27ae60;
    --error-color: #e74c3c;
    --background-color: #f0f0f0;
    --card-background: white;
    --text-color: #333;
    --hint-color: #ffeaa7;
  }

  body {
    font-family: "Microsoft JhengHei", "SimHei", Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    background-color: var(--background-color);
    padding: 20px;
    color: var(--text-color);
  }

  .container {
    background-color: var(--card-background);
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
  }

  h1 {
    text-align: center;
    color: var(--secondary-color);
    margin-bottom: 1.5rem;
  }

  #article {
    font-size: 1.5rem;
    line-height: 2;
    margin-bottom: 1.5rem;
    text-align: center;
    background-color: #f8f9fa;
    padding: 1.5rem 10rem;
    border-radius: 5px;
  }

  .char-container {
    display: inline-block;
    text-align: center;
    margin: 0 5px;
    vertical-align: top;
    width: 40px;
  }

  .pinyin {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 1em;
    color: #666;
    height: 1.5em;
    visibility: hidden;
  }

  .char {
    display: block;
    font-size: 1.5em;
  }

  .highlight .char {
    background-color: var(--hint-color);
    padding: 0 2px;
    border-radius: 3px;
  }

  .highlight .pinyin {
    visibility: visible;
    font-weight: bold;
  }

  .correct .char {
    color: var(--success-color);
  }

  .button-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  #input-wrapper {
    flex-grow: 1;
    margin: 0 2rem;
  }

  #input {
    width: 100%;
    font-size: 1.2rem;
    padding: 0.5rem;
    border: 2px solid var(--primary-color);
    border-radius: 5px;
    outline: none;
  }

  #input:focus {
    border-color: var(--secondary-color);
  }

  .progress-container {
    display: flex;
    align-items: center;
  }

  #progress {
    font-size: 1rem;
    margin-right: 1rem;
    white-space: nowrap;
  }

  button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    color: white;
    background-color: var(--primary-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition:
      background-color 0.3s,
      transform 0.1s;
  }

  button:hover {
    background-color: var(--secondary-color);
  }

  button:active {
    transform: translateY(0);
  }

  .toggle-switch {
    position: relative;
    width: 60px;
    height: 34px;
    background-color: #ccc;
    border-radius: 34px;
    border: none;
    outline: none;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .toggle-switch::before {
    content: "";
    position: absolute;
    width: 26px;
    height: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    border-radius: 50%;
    transition: transform 0.3s;
  }

  .toggle-switch.on {
    background-color: var(--success-color);
  }

  .toggle-switch.on::before {
    transform: translateX(26px);
  }

  .instruction {
    font-size: 0.9rem;
    color: #7f8c8d;
    text-align: center;
    margin-top: 1rem;
  }
</style>

<script>
  const articles = [
    "夕陽西下山河靜，青黛連天雲影生。",
    "湖邊花開映水清，芳草萋萋鳥鳴聲。",
    "清風拂面柳絲舞，明月當空映江渚。",
    "桃花流水江南岸，暮雨潇潇映河川。",
    "翠竹青青掩小徑，泉聲叮咚落山間。",
    "白雲悠悠遮山巒，紅葉滿地秋意濃。",
    "紅杏枝頭春意鬧，翠鳥啼鳴花下俏。",
    "風送梅香滿庭芳，夜來輕寒入羅裳。",
    "孤帆遠影碧空盡，唯見長江天際流。",
    "石橋流水聽秋聲，村舍炊煙處處明。",
    "星河燦爛夜空懸，松濤陣陣隨風旋。",
    "遠山含黛煙霧鎖，小橋流水映霞光。",
    "春雨潤物細無聲，柳絲輕拂花滿庭。",
    "秋風蕭瑟黃葉飛，寒蟬幽幽夜未央。",
    "夏日炎炎荷花香，蛙聲陣陣伴月光。",
    "冬雪皚皚山河靜，梅花點點映紅牆。",
    "晨曦初露霞光繞，百鳥齊鳴山谷曉。",
    "黃昏斜陽入翠微，煙波浩渺水連天。",
    "柳暗花明春意動，魚游碧水映荷塘。",
    "庭前小院草青青，夜深人靜月朦朧。",
    "清溪流水潺潺響，山花爛漫映日光。",
    "晚風習習吹蓮動，舟楫輕搖入夢鄉。",
    "古道西風瘦馬行，斜陽草樹映孤城。",
    "寒夜孤燈映書卷，心隨夢遠入雲端。",
    "碧海藍天鷗鳥翔，青山綠水映斜陽。",
    "青梅竹馬情意長，春風十里笑顏開。",
    "暮春三月鶯啼晚，南燕雙飛歸巢來。",
    "落花流水春去也，天涯芳草無盡時。",
    "山川壯麗行路難，江河浩蕩天地寬。",
    "翠綠山林鳥語盈，清泉潺潺入山徑。",
    "萬里無雲天色朗，碧空如洗映湖光。",
    "朝霞初起紅如火，晚霞漸散天漸暗。",
    "青山隱隱水迢迢，白雲悠悠映寥廓。",
    "春風又綠江南岸，明月何時照我還。",
    "幽篁深處鳥聲喧，細雨蒙蒙潤青山。",
    "暮色蒼茫天地間，晚霞殘照水雲間。",
    "東風吹拂柳絲長，桃花片片落池塘。",
    "溪水清澈魚兒游，山花爛漫春意濃。",
  ];

  interface PinyinData {
    [key: string]: string[];
  }

  class PinyinPractice {
    private currentArticle: string = "";
    private currentIndex: number = 0;
    private correctCount: number = 0;
    private pinyinData: PinyinData = {};
    private hintEnabled: boolean = true;
    private hintTimeout: number | null = null;

    private articleElement: HTMLElement;
    private progressElement: HTMLElement;
    private inputElement: HTMLInputElement;

    constructor() {
      this.articleElement = document.getElementById("article") as HTMLElement;
      this.progressElement = document.getElementById("progress") as HTMLElement;
      this.inputElement = document.getElementById("input") as HTMLInputElement;

      this.inputElement.addEventListener("input", () => this.handleInput());
      this.inputElement.addEventListener("keypress", (e: KeyboardEvent) =>
        this.handleKeyPress(e),
      );
      const nextArticleButton = document.getElementById("next-article");
      if (nextArticleButton) {
        nextArticleButton.addEventListener("click", () => this.nextArticle());
      }
      const toggleHintButton = document.getElementById("toggle-hint");
      if (toggleHintButton) {
        toggleHintButton.addEventListener("click", () => this.toggleHint());
      }

      this.fetchPinyinData();
    }

    private async fetchPinyinData(): Promise<void> {
      try {
        const response = await fetch(
          "https://api.github.com/repos/mozillazg/pinyin-data/contents/pinyin.txt",
        );
        const data: { content: string } = await response.json();
        const content = atob(data.content);
        this.pinyinData = this.parsePinyinData(content);
        console.log("拼音數據已成功加載");
        this.nextArticle();
      } catch (error) {
        console.error("無法獲取拼音數據:", error);
        alert("無法獲取拼音數據，請刷新頁面重試。");
      }
    }

    private parsePinyinData(rawContent: string): PinyinData {
      const utf8Decoder = new TextDecoder("utf-8");
      const decodedContent = utf8Decoder.decode(
        new Uint8Array(rawContent.split("").map((c) => c.charCodeAt(0))),
      );
      const lines = decodedContent.split("\n");
      return lines.reduce((data: PinyinData, line: string) => {
        if (line.startsWith("U+") && line.includes(":")) {
          const [codePoint, rest] = line.split(":");
          const [pinyins] = rest.split("#").map((s) => s.trim());
          const char = String.fromCodePoint(parseInt(codePoint.slice(2), 16));
          data[char] = pinyins.split(",").map((p) => p.trim());
        }
        return data;
      }, {});
    }

    private getRandomArticle(): string {
      return articles[Math.floor(Math.random() * articles.length)];
    }

    private nextArticle(): void {
      this.currentArticle = this.getRandomArticle();
      this.currentIndex = 0;
      this.correctCount = 0;
      this.updateDisplay();
    }

    private isPunctuation(char: string): boolean {
      return /[，。、？！：；（）《》「」『』【】—…・]/u.test(char);
    }

    private moveToNextChar(): void {
      do {
        this.currentIndex++;
      } while (
        this.currentIndex < this.currentArticle.length &&
        this.isPunctuation(this.currentArticle[this.currentIndex])
      );
    }

    private updateDisplay(): void {
      if (this.currentIndex >= this.currentArticle.length) {
        this.nextArticle();
        return;
      }

      const displayText = this.currentArticle
        .split("")
        .map((char, i) => {
          const charClass =
            i < this.currentIndex
              ? "correct"
              : i === this.currentIndex
                ? "highlight"
                : "";
          const pinyin = this.pinyinData[char] ? this.pinyinData[char][0] : "";
          return `
                <span class="char-container ${charClass}">
                    <span class="pinyin">${pinyin}</span>
                    <span class="char">${char}</span>
                </span>`;
        })
        .join("");

      this.articleElement.innerHTML = displayText;
      this.progressElement.textContent = `${this.currentIndex}/${this.currentArticle.length}`;
      this.inputElement.value = "";
      this.inputElement.placeholder = "請輸入拼音，按 Enter 確認";

      if (this.isPunctuation(this.currentArticle[this.currentIndex])) {
        this.moveToNextChar();
        this.updateDisplay();
      }

      this.hideAllPinyins();
      this.resetHintTimer();
    }

    private hideAllPinyins(): void {
      document
        .querySelectorAll(".pinyin")
        .forEach((el) => ((el as HTMLElement).style.visibility = "hidden"));
    }

    private showCurrentPinyin(): void {
      const currentPinyin = document.querySelector(".highlight .pinyin");
      if (currentPinyin) {
        (currentPinyin as HTMLElement).style.visibility = "visible";
      }
    }

    private resetHintTimer(): void {
      if (this.hintTimeout !== null) {
        clearTimeout(this.hintTimeout);
      }
      if (this.hintEnabled) {
        this.hintTimeout = window.setTimeout(
          () => this.showCurrentPinyin(),
          1000,
        );
      }
    }

    private removeTone(pinyin: string): string {
      return pinyin.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    private checkInput(): void {
      const inputValue = this.inputElement.value.trim().toLowerCase();
      const targetChar = this.currentArticle[this.currentIndex];
      const correctPinyins = this.pinyinData[targetChar];

      if (!correctPinyins) {
        console.error("找不到對應的拼音數據");
        alert("無法驗證拼音，請跳過此字符。");
        this.moveToNextChar();
        this.updateDisplay();
        return;
      }

      if (inputValue === "") {
        this.showAnswer(correctPinyins);
        return;
      }

      const inputPinyinWithoutTone = this.removeTone(inputValue);
      const isCorrect = correctPinyins.some(
        (p) => this.removeTone(p) === inputPinyinWithoutTone,
      );

      if (isCorrect) {
        this.inputElement.style.borderColor = "#27ae60";
        setTimeout(() => {
          this.moveToNextChar();
          this.updateDisplay();
        }, 500);
      } else {
        this.showAnswer(correctPinyins);
      }
    }

    private showAnswer(correctPinyins: string[]): void {
      this.inputElement.style.borderColor = "#e74c3c";
      this.inputElement.value = correctPinyins.join(", ");
      this.showCurrentPinyin();

      setTimeout(() => {
        this.inputElement.style.borderColor = "#3498db";
        this.inputElement.value = "";
        this.inputElement.placeholder = "請再次嘗試輸入拼音";
        this.inputElement.focus();
      }, 2000);
    }

    private handleKeyPress(e: KeyboardEvent): void {
      if (e.key === "Enter") {
        this.checkInput();
      }
    }

    private handleInput(): void {
      if (this.inputElement.value.trim() !== "") {
        this.hideAllPinyins();
      }
      this.resetHintTimer();
    }

    private toggleHint(): void {
      this.hintEnabled = !this.hintEnabled;
      const toggleButton = document.getElementById("toggle-hint");
      if (toggleButton) {
        toggleButton.classList.toggle("on", this.hintEnabled);
        toggleButton.setAttribute(
          "aria-label",
          this.hintEnabled ? "關閉提示" : "開啟提示",
        );
      }
      if (!this.hintEnabled) {
        if (this.hintTimeout !== null) {
          clearTimeout(this.hintTimeout);
        }
        this.hideAllPinyins();
      } else {
        this.updateDisplay();
      }
    }
  }

  // 初始化應用
  new PinyinPractice();
</script>
